{{$tEco := sdict}}
{{$ci := ""}}
{{$fo := ""}}
{{$invt := sdict }}
{{$inv := ""}}
{{$idt := 0}}
{{$ei := ""}}
{{$d := "**Usage** :\n- `$give <ci> <valeur>`\n- `$give <nom> (<quantité>)`\n > Note : La quantité est optionnelle."}}
{{$arr := "<:next:723131844643651655>" }}
{{$mon := ""}}
{{$col := 0x5b60b7}}
{{$sE := sdict}}
{{with (dbGet .Server.ID "economy")}}
	{{$sE = sdict .Value}}
{{end}}
{{if $sE.Get "symbol"}}
	{{$mon = $sE.Get "symbol"}}
{{end}}
{{$n := (reFind `((\s>\S*[^<\@(\!?)\d+)\s]\s>\S*)|\s>\S*)` .Message.Content)}}
{{$n = reReplace `>` $n ""}}
{{$n = reReplace `\s` $n ""}}
{{$u := .Member.Nick}}
{{$id := .user.ID }}
{{if $n}}
	{{$u = $n}}
	{{$idp := (toRune (lower $n))}}
	{{range $idp}}
		{{- $id = add $id . }}
	{{- end}}
{{else if eq (len $u) 0}}
	{{$u = .User.Username}}
{{end}}
{{$hpS := sdict }}
{{with (dbGet 0 "HP")}}
	{{$hpS = sdict .Value}}
{{end}}
{{with ($hpS.Get (str $id))}}
	{{$u = .Personnage}}
{{end}}
{{$au := $u}}
{{$t := ""}}
{{$uEco := sdict}}
{{with (dbGet $id "economy")}}
	{{$uEco = sdict .Value}}
{{end}}
{{$inv := sdict}}
{{with (dbGet $id "équipement")}}
	{{$inv = sdict .Value}}
{{end}}
{{$pl := sdict}}
{{with (dbGet $id "place")}}
	{{$pl = sdict .Value}}
{{end}}
{{if .CmdArgs}}
	{{$idt := .User.ID }}
	{{if (reFind `(#\S*)` (index .CmdArgs 0))}}
		{{$ci = title (reReplace `#` (index .CmdArgs 0) "")}}
		{{$re := sdict}}
		{{with (dbGet 0 "reroll_List")}}
			{{$re = sdict .Value}}
		{{end}}
    {{if ($re.Get $ci)}}
			{{$idt = (toInt ($re.Get $ci))}}
		{{end}}
    {{$idC := (toRune (lower $t))}}
		{{range $idC}}
			{{- $idt = add $idt .}}
		{{- end}}
	{{else if (userArg (index .CmdArgs 0))}}
		{{with (userArg (index .CmdArgs 0))}}
			{{$idt = .ID}}
			{{$ci = (getMember $idt).Nick}}
      {{if eq (len $ci) 0}}
        {{$ci = $t.Username}}
      {{end}}
		{{end}}
	{{end}}
	{{with ($hpS.Get (str $idt))}}
		{{$ci = .Personnage}}
	{{end}}
	{{$args := index .CmdArgs 1}}
	{{with (dbGet $idt "economy")}}
		{{$tEco = sdict .Value}}
	{{end}}

	{{if ne (toInt $args) 0}}
		{{$value := toInt $args}}
		{{$bal := toInt ($uEco.Get "balance")}}
		{{if gt $value $bal}}
			{{$d = "Tu ne peux pas donner autant !"}}
		{{else}}
			{{$newbal := add $value (toInt ($tEco.Get "balance"))}}
			{{$oldbal := sub $bal $value }}
			{{$d = joinStr " " $value $mon "\n\n" $ci "a maintenant" $newbal $mon "sur son compte et"  $u $oldbal $mon}}
			{{$uEco.Set "balance" $oldbal}}
			{{$tEco.Set "balance" $newbal}}
			{{dbSet $idt "economy" $tEco}}
			{{dbSet $id "economy" $uEco}}
			{{$au = joinStr " " $u "donne"}}
			{{$fo = joinStr " " "A" $ci }}
		{{end}}

	{{else if (eq (toInt $args) 0)}}
		{{$sid := sdict "[E] Sac À Dos" (sdict "ps" 5 "pc" 14 "as" 3 "ac" 9) "[E] Sacoche" (sdict "ps" 4 "pc" 11 "as" 2 "ac" 6) "[E] Sacoche Ceinture" (sdict "ps" 3 "pc" 8 "as" 1 "ac" 3)}}
		{{$q := 1}}
		{{$i := (title (lower $args))}}
		{{$cha := lower (reFind `(?i)chargeur` $i)}}
		{{$co := lower (reFind `(?i)(bc|lc|cb|sf|cu|\[X\]|armure)` $i)}}
		{{if $co}}
			{{if eq $co "bc"}}
				{{$i = "[C] Biocomposant"}}
			{{else if eq $co "lc"}}
				{{$i = "[C] Liquide Cytomorphe"}}
			{{else if eq $co "cb"}}
				{{$i = "[C] Cellule Bionotropique"}}
			{{else if eq $co "sf"}}
				{{$i = "[C] Substrat Ferreux"}}
			{{else if eq $co "cu"}}
				{{$i = "[C] Composant Universel"}}
			{{else if eq $co "armure"}}
				{{$item = "[X] Armure"}}
			{{end}}
		{{end}}
		{{$ver := false}}
    {{$sac := false}}
		{{if $cha}}
			{{$ver = true}}
			{{$i = title (lower (reFind `(?i)(fusil|pistolet|canon)` $i))}}
			{{$i = print "[CHARGEUR] " $i}}
		{{end}}
		{{$mimp := title (lower (reFind `(?i)(perforant|burst|soutien|altération|schéma|passif|force|résistance|cognition|furtivité|vision|vitalité|guérison)` $i))}}
		{{if eq $mimp "perforant" "burst" "soutien" "altération" "schéma" "passif"}}
			{{$i = print "[MODULE] " $mimp}}
		{{else if eq $mimp "force" "résistance" "cognition" "furtivité" "vision" "vitalité" "guérison"}}
			{{$i = print "[IMPLANT] " $mimp}}
		{{end}}
		{{$arme := lower (reFind `(?i)(poigne|épée|masse|pistolet|fusil|canon|couteau|^\[A\]|^\[CHARGEUR\]|^\[E\]|Sacoche|Sac à dos|Sacoche ceinture)` $i)}}
		{{if and (eq $arme "poigne" "épée" "masse" "pistolet" "fusil" "canon" "couteau") (ne $arme "[a]") (ne $arme "[chargeur]") (ne $arme "[e]") (ne $arme "sacoche") (ne $arme "sac à dos") (ne $arme "sacoche ceinture")}}
			{{$i = print "[A] " $i}}
    {{else if and (eq $arme "Sacoche" "Sac à dos" "Sacoche ceinture") (ne $arme "[e]") (ne $arme "[a]")}}
      {{$i = print "[E]" (title (lower $arme))}}
			{{$sac = true}}
		{{end}}
    {{if (reFind `-bdg` .Message.Content)}}
			{{$i = print "[BDG]" $i}}
		{{end}}
		{{$np = joinStr "" $ci " n'a plus de place dans l'inventaire pour " $i "."}}
		{{if or (and $n (ge (len .CmdArgs) 4)) (and (not $n) (ge (len .CmdArgs 3)))}}
			{{$q = toInt (index .CmdArgs 2)}}
		{{end}}
		{{with (dbGet $idt "équipement")}}
			{{$invt = sdict .Value}}
		{{end}}
		{{$pt := sdict}}
		{{with (dbGet $idt "place")}}
			{{$pt = sdict .Value}}
		{{end}}
		{{$sai := joinStr "" $u " votre " $i " est rempli ! Videz le avant de le ranger."}}
		{{$ss := $pl.Get "s_stuff"}}
		{{$sconso := $pl.Get "s_conso"}}
		{{$mst := $pl.Get "max_stuff"}}
		{{$mc := $pl.Get "max_conso"}}
		{{$ts := $pt.Get "s_stuff"}}
		{{$tco := $pt.Get "s_conso"}}
		{{$tms := $pt.Get "max_stuff"}}
		{{$tmc := $pt.Get "max_conso"}}
		{{if not ($inv.Get $i)}}
			{{$d = "Objet introuvable."}}
		{{else if gt $q ($inv.Get $i)}}
			{{$d = "Quantité trop élevée"}}
		{{else}}
			{{if $arme }}
				{{if (ne $sac true) (ne $ver true) }}
					{{if lt $q $ts }} 
						{{$pt.Set "s_stuff" (sub $ts $q)}}
						{{$pl.Set "s_stuff" (sub $ss $q)}}
						{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}
						{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}
						{{$d = joinStr "" $q " " $i}}
					{{else if le $q $ts}} 
						{{$pt.Set "s_stuff" (sub $ts $q)}}
						{{$pl.Set "s_stuff" $mst}}
						{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}
						{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}
						{{$d = joinStr "" $q " " $i}}
					{{else}}
						{{$d = $sai}}
					{{end}}
				{{else if eq $sac true}}
					{{$i = print "[E] " (title (lower $sac))}}
					{{$ps := 0}}
					{{$pc := 0}}
					{{$as := 0}}
					{{$ac := 0}}
					{{with ($sid.Get $i)}}
						{{$ps = .ps}}
						{{$pc = .pc}}
						{{$as = .as}}
						{{$ac = .ac}}
					{{end}}
					{{$ss = sub $ss $as}}
					{{$sconso = sub $sconso $ac}}
					{{if or (lt $ss 0) (lt $sconso 0)}}
						{{$d = $sai}}
					{{else}}
						{{$pl.Set "s_stuff" $ss}}
						{{$pl.Set "s_conso" $sconso}}
						{{$pl.Set "max_stuff" $ps}}
						{{$pl.Set "max_conso" $pc}}
						{{$pt.Set "s_stuff" (add $ts $as)}}
						{{$pt.Set "s_conso" (add $tco $ac)}}
						{{$pt.Set "max_stuff" (add $ts $as)}}
						{{$pt.Set "max_conso" (add $tco $ac)}}
						{{$inv.Del $i}}
						{{$invt.Set $i 1}}
						{{$d = joinStr "" $q " " $i}}
					{{end}}
				{{else if or (eq $ver true) (not $co)}}
					{{if lt (toInt $q) (toInt $tco) }}
						{{$pt.Set "s_conso" (sub $tco $q)}}
						{{$pl.Set "s_conso" (sub $sconso $q)}}
						{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}
						{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}
						{{$d = joinStr "" $q " " $i}}
					{{else if le (toInt $q) (toInt $tco)}}
						{{$pt.Set "s_conso" (sub $tco $q)}}
						{{$pl.Set "s_conso" $mc}}
						{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}
						{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}
						{{$d = joinStr "" $q " " $i}}
					{{else}}
						{{$d = $np}}
					{{end}}
        {{end}}
			{{else if $co }}
				{{if and (eq $i "[X] Armure") ($invt.Get $i) (gt $q 1)}}
					{{$d = print $ci " porte déjà une armure."}}
				{{else}}
					{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}
					{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}
					{{$d = joinStr "" $q " " $i}}
				{{end}}
			{{else}}
      	{{if lt (toInt $q) (toInt $tco) }}
			    {{$pt.Set "s_conso" (sub $tco $q)}}
					{{$pl.Set "s_conso" (sub $sconso $q)}}
					{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}
					{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}
					{{$d = joinStr "" $q " " $i}}
        {{else if le (toInt $q) (toInt $tco)}}
	        {{$pt.Set "s_conso" (sub $tco $q)}}
					{{$pl.Set "s_conso" $mc}}
					{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}
					{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}
					{{$d = joinStr "" $q " " $i}}
        {{else}}
					{{$d = $np}}
      	{{end}}
				{{if le (toInt ($inv.Get $i)) 0}}
					{{$inv.Del $i}}
				{{end}}
				{{$ei = print "▫️ **Inventaire de " $u " : \n Équipement : [" ($pl.Get "s_stuff") "/ " ($pl.Get "max_stuff") " ]\n Consommable : [" ($pl.Get "s_conso") "/" ($pt.Get "s_conso") "]\n\n ▫️ **Inventaire de " $ci ":\n Équipement : [" ($pt.Get "s_stuff") "/" ($pt.Get "max_stuff") "]\n Consommable : [" ($pt.Get "s_conso") "/" ($pt.Get "max_conso") "]"}}
			  {{$au = joinStr " " $u "donne"}}
				{{$fo = joinStr " " "À" $ci }}
				{{dbSet $id "équipement" $inv}}
				{{dbSet $idt "équipement" $invt}}
      {{end}}
		{{end}}
	{{else}}
		{{$d = "Erreur de cible"}}
	{{end}}
{{end}}
{{$embed := cembed
"author" (sdict "name" $au "icon_url" "https://i.imgur.com/DwoqSFH.png")
"description" $d
"footer" (sdict "text" $fo "icon_url" "https://i.imgur.com/WoypxHH.png")
"color" $col }}
{{sendMessage nil (complexMessage "content" $ei "embed" $embed)}}
{{deleteTrigger 1}}