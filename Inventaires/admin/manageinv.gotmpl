{{$name := reFind `(\>\S*)` .Message.Content}}
{{$name = joinStr "" (split $name ">")}}
{{$user := .Member.Nick}}
{{$id := .User.ID }}
{{if $name}}
 {{$rr := sdict}}
	{{with (dbGet 0 "reroll_List")}}
		{{$rr = sdict .Value}}
	{{end}}
	{{$user = title $name}}
  {{$id = (toInt ($rr.Get $user))}}
	{{$idperso := (toRune (lower $name))}}
	{{range $idperso}}
		{{- $id = add $id . }}
	{{- end}}
{{else if eq (len $user) 0}}
	{{$user = .User.Username}}
{{end}}{{$hpS := sdict }}{{with (dbGet 0 "HP")}}{{$hpS = sdict .Value}}{{end}}{{with ($hpS.Get (str $id))}}{{$user = .Personnage}}{{end}}

{{$msg := ""}}

{{if .CmdArgs}}
  {{$secondflag := ""}}
	{{$target := ""}}
	{{$item := ""}}
  {{$chargeur := ""}}
	{{$amount := 1}}
	{{with .CmdArgs}}
		{{if ge (len .) 1}}
			{{$secondflag = (reFind `\-(add|reset|init|rm)` (index . 0))}}
			{{if ge (len .) 2}}
        {{if $name}}
          {{$target = $id}}
          {{$user = title $name}}
        {{else}}
          {{with (userArg (index . 1))}}
            {{$target = .}}
            {{$target = $target.ID}}
            {{$user = (getMember $target).Nick}}
            {{if eq (len $user) 0}}
              {{$user = .}}
              {{$user = $user.Username}}
            {{end}}
          {{end}}
			  {{end}}
				{{if ge (len .) 3}}
					{{$item = title (index . 2)}}
					{{if ge (len .) 4}}
            {{$amount = or (toInt (index . 3)) 1}}
					{{end}}
				{{end}}
			{{end}}
		{{end}}
	{{end}}
	{{if not $secondflag}}
		**Usage** : `$manageinv -(add|reset|init) user item amount`
	{{else}}
		{{$equip := sdict}}
    {{$place := sdict}}
		{{if $target}}
      {{with (dbGet $target "équipement")}}
        {{$equip = sdict .Value}}
      {{end}}
      {{with (dbGet $target "place")}}
        {{$place = sdict .Value}}
      {{end}}
      {{if eq $secondflag "-init"}}
        {{$place.Set "s_conso" 5}}
        {{$place.Set "s_stuff" 2}}
        {{$place.Set "max_conso" 5}}
        {{$place.Set "max_stuff" 2}}
        {{dbSet $target "place" $place}}
        Inventaire de {{$user}} initialisé. 

      {{else if eq $secondflag "-reset"}}
        {{dbDel $target "équipement"}}
        {{$place.Set "s_conso" 5}}
        {{$place.Set "s_stuff" 2}}
        {{$place.Set "max_conso" 5}}
        {{$place.Set "max_stuff" 2}}
        Inventaire de : {{$user}} Nettoyé !
        {{dbSet $target "place" $place}}

      {{else if eq $secondflag "-add"}}
        {{$conso := false}}
        {{$chargeur = reFind `(?i)chargeur` $item}}
        {{if $chargeur}}
          {{$weap := reFind `(?i)(fusil|pistolet|canon)` $item}}
          {{$item = print "[CHARGEUR] " (title (lower $weap))}}
          {{$conso = true}}
        {{end}}

        {{$compo := reFind `(?i)(bc|lc|cb|sf|cu)` $item}}
        {{if $compo}}
          {{if eq $compo "bc" "BC" "Bc"}}
            {{$item = "[C] Biocomposant"}}
          {{else if eq $compo "lc" "LC" "Lc"}}
            {{$item = "[C] Liquide Cytomorphe"}}
          {{else if eq $compo "cb" "CB" "Cb"}}
            {{$item = "[C] Cellule Bionotropique"}}
          {{else if eq $compo "sf" "SF" "Sf"}}
            {{$item = "[C] Substrat Ferreux"}}
          {{else if eq $compo "cu" "CU" "Cu"}}
            {{$item = "[C] Composant Universel"}}
          {{end}}
        {{end}}
        {{$sac := (reFind `(?i)(Sacoche$|Sac à dos|(Sacoche ceinture))` $item)}}
        {{if $sac}}
          {{$item = print "[E] " (title (lower $sac))}}
        {{end}}
          
        {{$mimp := (reFind `(?i)(perforant|burst|soutien|altération|schéma|passif|force|résistance|cognition|furtivité|vision|vitalité|guérison)` $item)}}
        {{if eq $mimp "perforant" "burst" "soutien" "altération" "schéma" "passif"}}
          {{$item = print "[MODULE] " $mimp}}
        {{else if eq $mimp "force" "résistance" "cognition" "furtivité" "vision" "vitalité" "guérison"}}
          {{$item = print "[IMPLANT] " $mimp}}
        {{end}}
          
        {{$arme := lower (reFind `(?i)(poigne|épée|masse|pistolet|fusil|canon|couteau|^\[A\]|^\[CHARGEUR\])` $item)}}
        {{if and (eq $arme "poigne" "épée" "masse" "pistolet" "fusil" "canon" "couteau") (ne $arme "[a]") (ne $arme "[chargeur]")}}
          {{$item = joinStr " " "[A] " $item}}
        {{end}}
      
        {{$sstuff := $place.Get "s_stuff"}}
        {{$sconso := $place.Get "s_conso"}}
        {{if and (or $arme (reFind `^\[E\]` $item)) (ne $conso true)}}
          {{if not $sac }}
            {{if le (toInt $amount) (toInt $sstuff) }}
              {{$place.Set "s_stuff" (sub $sstuff $amount)}}
              {{$equip.Set $item (add ($equip.Get $item) (toInt $amount))}}
              {{$msg = joinStr "" $user " a obtenu " $amount " " $item "."}}
            {{else}}
              {{$msg = joinStr "" $user " n'a pas assez de place dans son inventaire." }}
            {{end}}
          {{else if $sac}}
            {{if or ($equip.Get "[E] Sac À Dos" ) ($equip.Get "[E] Sacoche" ) ($equip.Get "[E] Sacoche Ceinture")}}
              {{$msg = joinStr "" $user " possède déjà un sac. Merci de retirer l'ancien."}}
            {{else}}
              {{if eq $item "[E] Sac À Dos" }}
                {{$place.Set "s_stuff" (add $sstuff 3)}}
                {{$place.Set "s_conso" (add $sconso 9)}}
                {{$place.Set "max_stuff" 5}}
                {{$place.Set "max_conso" 14}}
              {{else if eq $item "[E] Sacoche" }}
                {{$place.Set "s_stuff" (add $sstuff 2)}}
                {{$place.Set "s_conso" (add $sconso 6)}}
                {{$place.Set "max_stuff" 4}}
                {{$place.Set "max_conso" 11}}
              {{else if eq $item "[E] Sacoche Ceinture"}}
                {{$place.Set "s_stuff" (add $sstuff 1)}}
                {{$place.Set "s_conso" (add $sconso 3)}}
                {{$place.Set "max_stuff" 3}}
                {{$place.Set "max_conso" 8}}
              {{end}}
              {{$equip.Set $item 1}}
              {{$msg = joinStr "" $user " a obtenu " $item "."}}
            {{end}}
          {{end}}
        {{else if or (eq $compo true) (and (not $compo) (not ((reFind `\[X\]` $item))))}}
          {{if and (le $amount (toInt $sconso))}}
            {{$place.Set "s_conso" (sub $sconso $amount)}}
            {{$equip.Set $item (add ($equip.Get $item) (toInt $amount))}}
            {{$msg = joinStr "" $user " a obtenu " $amount " " $item "."}}
          {{else}}
            {{$msg = joinStr "" $user " n'a pas assez de place dans son inventaire."}}
          {{end}}
        {{else if or $compo (reFind `\[X\]` $item)}}
          {{$equip.Set $item (add ($equip.Get $item) (toInt $amount))}}
          {{$msg = joinStr "" $user " a obtenu " $amount " " $item ", sans perte de place."}}
        {{end}}

        {{if le (toInt ($place.Get "s_stuff")) 0}}
          {{$place.Set "s_stuff" 0}}
        {{end}}
        {{if le (toInt ($place.Get "s_conso")) 0}}
          {{$place.Set "s_conso" 0}}
        {{end}}
        {{dbSet $target "équipement" $equip}}
        {{dbSet $target "place" $place}}
        {{$msg = joinStr "" $msg "\n" $user " : Il vous reste " ($place.Get "s_stuff") " places d'équipements et " ($place.Get "s_conso") " places de consommables."}} 
      {{end}}  
    {{end}}
  {{end}}
{{else}}
**Usage** : `$manageinv -(init|reset|add|rm) @/>cible item amount`
> Si reset / init : juste indiquer l'utilisateur
{{end}}
{{sendMessage nil $msg}}
{{deleteTrigger 1}}
