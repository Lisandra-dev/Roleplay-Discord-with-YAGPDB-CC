{{/* Variable definition */}}
{{$tEco := sdict}}{{$ci := ""}}{{$au := "Erreur"}}{{$fo := ""}}{{$invt := sdict }}{{$inv := ""}}{{$idt := 0}}{{$d := "**Usage** :\n- `$give <ci> <valeur>`\n- `$give <nom> (<quantité>)`\n > Note : La quantité est optionnelle."}}{{$arr := "<:next:723131844643651655>" }}{{/* Symbol */}}{{$mon := ""}}
{{/* Give color */}}
{{$col := 16777215}}{{$p := 0}}{{$r := .Member.Roles}}
{{range .Guild.Roles}}
	{{if and (in $r .ID) (.Color) (lt $p .Position)}}
		{{$p = .Position}}
		{{$col = .Color}}
	{{end}}
{{end}}
{{/* DB */}}
{{$sE := sdict}}{{with (dbGet .Server.ID "economy")}}{{$sE = sdict .Value}}{{end}}
{{if $sE.Get "symbol"}}{{$mon = $sE.Get "symbol"}}{{end}}
{{$n := (reFind `(\>\S*)` .Message.Content)}}{{$n = reReplace `>` $n ""}}{{$u := .Member.Nick}}{{$id := .user.ID }}
{{if $n}}
	{{$u = $n}}
	{{$re := sdict}}
	{{with (dbGet 0 "reroll_List")}}{{$re = sdict .Value}}{{end}}
	{{$id = (toInt ($re.Get $u))}}
	{{$idp := (toRune (lower $n))}}
	{{range $idp}}
		{{- $id = add $id . }}
	{{- end}}
{{else if eq (len $u) 0}}
	{{$u = .User.Username}}
{{end}}{{$hpS := sdict }}{{with (dbGet 0 "HP")}}{{$hpS = sdict .Value}}{{end}}{{with ($hpS.Get (str $id))}}{{$u = .Personnage}}{{end}}
{{$u = title $u}}{{$t := ""}}
{{$uEco := sdict}}{{with (dbGet $id "economy")}}{{$uEco = sdict .Value}}{{end}}
{{$inv := sdict}}{{with (dbGet $id "équipement")}}{{$inv = sdict .Value}}{{end}}
{{$pl := sdict}}{{with (dbGet $id "place")}}{{$pl = sdict .Value}}{{end}}

{{if .CmdArgs}}
	{{$idt := .User.ID }}
	{{if (reFind `(\>\>\S*)` (index .CmdArgs 0))}}
		{{$t = reReplace `>` (index .CmdArgs 0) ""}}
		{{$re := sdict}}
		{{with (dbGet 0 "reroll_List")}}{{$re = sdict .Value}}{{end}}
		{{$idt = (toInt ($re.Get (title $t)))}}{{$idC := (toRune (lower $t))}}
		{{range $idC}}
			{{- $idt = add $idt .}}
		{{- end}}
	{{else if (not (reFind `(\>\>\S*)` (index .CmdArgs 0)))}}
		{{with (userArg (index .CmdArgs 0))}}
			{{$t = .}}{{$idt = $t.ID}}{{$ci = (getMember $t).Nick}}
		{{else}}
			{{$idt = 0}}
		{{end}}
	{{else}}
		{{$idt = 0}}
	{{end}}{{$ci = title $t}}{{with ($hpS.get (str $idt))}}{{$ci = .Personnage}}{{end}}
	{{$args := index .CmdArgs 1}}{{with (dbGet $idt "economy")}}{{$tEco = sdict .Value}}{{end}}

	{{if ne (toInt $args) 0}}
		{{$value := toInt $args}}
		{{$bal := toInt ($uEco.Get "balance")}}
		{{if gt $value $bal}}
			{{$d = "Tu ne peux pas donner autant !"}}
		{{else}}
			{{$newbal := add $value (toInt ($tEco.Get "balance"))}}{{$oldbal := sub $bal $value }}{{$d = joinStr " " $value $mon "\n\n" $arr  $ci "a maintenant" $newbal $mon "sur son compte. \n" $arr  $u "a maintenant" $oldbal $mon " sur son compte."}}{{$uEco.Set "balance" $oldbal}}{{$tEco.Set "balance" $newbal}}{{dbSet $idt "economy" $tEco}}{{dbSet $id "economy" $uEco}}{{$au = joinStr " " $u "donne"}}{{$fo = joinStr " " "A" $ci }}
		{{end}}

	{{else if (eq (toInt $args) 0)}}
		{{$q := 1}}
		{{$i := (title (lower $args))}}
		{{$cha := lower (reFind `(?i)chargeur` $i)}}{{$co := lower (reFind `(?i)(bc|lc|cb|sf|cu)` $i)}}
		{{if $co}}
			{{if eq $co "bc"}}
				{{$i = "[C] Biocomposant"}}
			{{else if eq $co "lc"}}
				{{$i = "[C] Liquide Cytomorphe"}}
			{{else if eq $co "cb"}}
				{{$i = "[C] Cellule Bionotropique"}}
			{{else if eq $co "sf"}}
				{{$i = "[C] Substrat Ferreux"}}
			{{else if eq $co "cu"}}
				{{$i = "[C] Composant Universel"}}
			{{end}}
		{{end}}
		{{$ver := false}}
		{{if $cha}}{{$ver = true}}{{$i = title (lower (reFind `(?i)(fusil|pistolet|canon)` $i))}}{{$i = print "[CHARGEUR] " $i}}{{end}}
		{{$mimp := title (lower (reFind `(?i)(perforant|burst|soutien|altération|schéma|passif|force|résistance|cognition|furtivité|vision|vitalité|guérison)` $i))}}
		{{if eq $mimp "perforant" "burst" "soutien" "altération" "schéma" "passif"}}
			{{$i = print "[MODULE] " $mimp}}
		{{else if eq $mimp "force" "résistance" "cognition" "furtivité" "vision" "vitalité" "guérison"}}
			{{$i = print "[IMPLANT] " $mimp}}
		{{end}}
		{{$arme := lower (reFind `(?i)(poigne|épée|masse|pistolet|fusil|canon|couteau|^\[A\]|^\[CHARGEUR\])` $i)}}
		{{if and (eq $arme "poigne" "épée" "masse" "pistolet" "fusil" "canon" "couteau") (ne $arme "[A]") (ne $arme "[chargeur]")}}
			{{$i = print "[A] " $i}}
		{{end}}
		{{$sac := (reFind `(?i)(Sacoche|Sac à dos|Sacoche ceinture)` $i)}}{{if $sac}}{{$i = print "[E] " (title (lower $sac))}}{{end}}
		{{if and (reFind `-bdg` .Message.Content) (not $mimp) (ne $ver true) (not $co) (not $sac)}}
			{{$i = print "[BDG] " $i}}
		{{end}}
		{{if ge (len .CmdArgs) 4}}{{$q = toInt (index .CmdArgs 2)}}{{end}}
		{{with (dbGet $idt "équipement")}}{{$invt = sdict .Value}}{{end}}
		{{$pt := sdict}}{{with (dbGet $idt "place")}}{{$pt = sdict .Value}}{{end}}
		{{$ss := $pl.Get "s_stuff"}}{{$sconso := $pl.Get "s_conso"}}
		{{$mst := $pl.Get "max_stuff"}}{{$mc := $pl.Get "max_conso"}}{{$ts := $pt.Get "s_stuff"}}{{$tco := $pt.Get "s_conso"}}{{$tms := $pt.Get "max_stuff"}}{{$tmc := $pt.Get "max_conso"}}
		{{if not ($inv.Get $i)}}
			{{$d = "Objet introuvable dans l'inventaire"}}
		{{else if gt $q ($inv.Get $i)}}
			{{$d = "Quantité trop élevé par rapport à la quantité disponible"}}
		{{else}}
			{{if or $arme (reFind `^\[E\]` $i)}}
				{{if (not $sac) (ne $ver true) }}
					{{if lt $q $ts }} 
						{{$pt.Set "s_stuff" (sub $ts $q)}}{{$pl.Set "s_stuff" (sub $ss $q)}}
						{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}{{$d = joinStr "" $q " " $i}}
					{{else if le $q $ts}} 
						{{$pt.Set "s_stuff" (sub $ts $q)}}{{$pl.Set "s_stuff" $mst}}{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}{{$d = joinStr "" $q " " $i}}
					{{else}}
						{{$d = joinStr "" $ci " n'a plus de place dans l'inventaire pour recevoir " $i "."}}
					{{end}}
				{{else if $sac}}
					{{$i = print "[E] " (title (lower $sac))}}
					{{if eq $i "[E] Sac À Dos" }}
						{{$ss = sub $ss 3}}{{$sconso = sub $sconso 9}}
						{{if or (lt $ss 0) (lt $sconso 0)}}
							{{$d = joinStr "" $u " votre " $i " est rempli ! Videz le avant de le ranger."}}
						{{else}}
							{{$pl.Set "s_stuff" $ss}}{{$pl.Set "s_conso" $sconso}}{{$pl.Set "max_stuff" 2}}{{$pl.Set "max_conso" 5}}{{$pt.Set "s_stuff" (add $ts 3)}}{{$pt.Set "s_conso" (add $tco 9)}}{{$pt.Set "max_stuff" (add $ts 3)}}{{$pt.Set "max_conso" (add $tco 9)}}
						{{end}}
					{{else if eq $i "[E] Sacoche" }}
						{{$ss = sub $ss 2}}{{$sconso = sub $sconso 6}}
						{{if or (lt $ss 0) (lt $sconso 0)}}
							{{$d = joinStr "" $u " votre " $i " est rempli ! Videz le avant de le ranger."}}
						{{else}}
							{{$pl.Set "s_stuff" $ss}}{{$pl.Set "s_conso" $sconso}}{{$pl.Set "max_stuff" 2}}{{$pl.Set "max_conso" 5}}{{$pt.Set "s_stuff" (add $ts 2)}}{{$pt.Set "s_conso" (add $tco 6)}}{{$pt.Set "max_stuff" (add $ts 2)}}{{$pt.Set "max_conso" (add $tco 6)}}
						{{end}}
					{{else if eq $i "[E] Sacoche Ceinture"}}
						{{$ss = sub $ss 1}}
						{{$sconso = sub $sconso 3}}
						{{if or (lt $ss 0) (lt $sconso 0)}}
							{{$msg = joinStr "" $u " votre " $i " est rempli ! Videz le avant de le ranger."}}
						{{else}}
							{{$pl.Set "s_stuff" $ss}}{{$pl.Set "s_conso" $sconso}}{{$pl.Set "max_stuff" 2}}{{$pl.Set "max_conso" 5}}{{$pt.Set "s_stuff" (add $ts 1)}}{{$pt.Set "s_conso" (add $tco 3)}}{{$pt.Set "max_stuff" (add $ts 1)}}{{$pt.Set "max_conso" (add $tco 3)}}
						{{end}}
					{{end}}
					{{$inv.Del $i}}{{$invt.Set $i 1}}{{$d = joinStr "" $q " " $i}}
				{{else if or (eq $ver true) (and (not $co) (not (reFind `^\[X\]` $i)))}}
					{{if lt (toInt $q) (toInt $tco) }}
						{{$pt.Set "s_conso" (sub $tco $q)}}{{$pl.Set "s_conso" (sub $sconso $q)}}{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}{{$d = joinStr "" $q " " $i}}
					{{else if le (toInt $q) (toInt $tco)}}
						{{$pt.Set "s_conso" (sub $tco $q)}}{{$pl.Set "s_conso" $mc}}{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}{{$d = joinStr "" $q " " $i}}
					{{else}}
						{{$d = joinStr "" $ci " n'a plus de place dans l'inventaire pour recevoir" $i "."}}
					{{end}}
				{{end}}
			{{else if or $co (reFind `\[X\]` $i)}}
				{{$inv.Set $i (sub (toInt ($inv.Get $i)) $q)}}{{$invt.Set $i (add (toInt ($inv.Get $i)) $q)}}{{$d = joinStr "" $q " " $i}}
			{{end}}
			{{if le (toInt ($inv.Get $i)) 0}}
				{{$inv.Del $i}}
			{{end}}

			{{$d = joinStr "" $d "\n\n ▫️" $u " : il vous reste " ($pl.Get "s_stuff") " places d'équipements et " ($pl.Get "s_conso") " places de consommables. \n ▫️ " $ci " : il vous reste " ($pt.Get "s_stuff") " places d'équipements et " ($pt.Get "s_conso") " places de consommables. " }}
			{{$au = joinStr " " $u "donne"}}{{$fo = joinStr " " "A" $ci }}{{dbSet $id "équipement" $inv}}{{dbSet $idt "équipement" $invt}}
		{{end}}
	{{else}}
		{{$d = "Erreur de cible"}}
	{{end}}
{{else}}
	{{$d = "**Usage** :\n- `$give <ci> <valeur>`\n- `$give <nom> (<quantité>)`\n > Note : La quantité est optionnelle."}}
{{end}}

{{$embed := cembed
"author" (sdict "name" $au "icon_url" "https://i.imgur.com/DwoqSFH.png")
"description" $d
"footer" (sdict "text" $fo "icon_url" "https://i.imgur.com/WoypxHH.png")
"color" $col }}
{{sendMessage nil $embed}}
{{deleteTrigger 1}}